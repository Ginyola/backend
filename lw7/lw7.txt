CREATE DATABASE PC;

USE PC;

CREATE TABLE pc
(
id SERIAL,
cpu INT UNSIGNED,
memory INT UNSIGNED,
hdd INT UNSIGNED,
PRIMARY KEY(id)
);

INSERT INTO pc (cpu, memory, hdd) VALUES
(1600, 2000, 500),
(2400, 3000, 800),
(3200, 3000, 1200),
(2400, 2000, 500);

1.1
SELECT id, cpu, memory FROM pc 
WHERE memory = 3000;
1.2
SELECT hdd FROM pc 
HAVING MIN(hdd);
1.3
SELECT COUNT(hdd), hdd FROM pc 
GROUP BY (hdd)
ORDER BY hdd
LIMIT 1;

2.
CREATE TABLE track_downloads ( 
      download_id BIGINT(20) NOT NULL AUTO_INCREMENT, 
      track_id INT NOT NULL, 
      user_id BIGINT(20) NOT NULL, 
      download_time TIMESTAMP NOT NULL DEFAULT 0, 
       
      PRIMARY KEY (download_id) 
    ); 

INSERT INTO track_downloads (track_id, user_id, download_time) VALUES
(1, 2, '2010-11-19'),
(12, 16, '2010-11-19'),
(4, 77, '2010-11-19'),
(1, 1, '2010-11-19'),
(2, 4, '2010-11-19'),
(2, 4, '2010-11-19'),
(3, 7, '2010-11-19'),
(4, 7, '2010-11-19'),
(8, 7, '2010-11-19'),
(9, 7, '2010-11-19'),
(2, 4, '2017-09-01'),
(3, 7, '2003-03-04'),
(5, 6, '2010-12-19'),
(2, 4, '2017-09-01');



SELECT user_id, count(download_id) AS user_download_count
FROM track_downloads
WHERE download_time LIKE '2010-11-19%'
GROUP BY user_id;

SELECT download_count, COUNT(user_id) AS user_count
FROM 
(
	SELECT user_id, count(download_id) AS download_count
	FROM track_downloads
	WHERE download_time LIKE '2010-11-19%'
	GROUP BY user_id
) AS sub_table
GROUP BY download_count;

3.
DATETIME
Хранит время в виде целого числа вида YYYYMMDDHHMMSS, используя для этого 8 байтов.
Это время не зависит от временной зоны. Оно всегда отображается при выборке точно так же, как было сохранено,
независимо от того какой часовой пояс установлен в MySQL.

TIMESTAMP
Хранит 4-байтное целое число, равное количеству секунд, прошедших с полуночи 1 января 1970 года
по усреднённому времени Гринвича (т.е. нулевой часовой пояс, точка отсчёта часовых поясов).
При получении из базы отображается с учётом часового пояса. Часовой пояс может быть задан в операционной системе,
глобальных настройках MySQL или в конкретной сессии.

4.
CREATE TABLE students ( 
      student_id SERIAL, 
      name VARCHAR(255), 	  
      PRIMARY KEY (student_id) 
    ); 

INSERT INTO students (name) VALUES
('Ivanov'), ('Petrov'), ('Sidorov'), ('Chapaev'), ('Mendeleev'), 
('Manning'), ('Smith'), ('Jackson'), ('Alibaba'), ('NoName');

CREATE TABLE courses ( 
      course_id SERIAL, 
      course_name VARCHAR(255),  
      PRIMARY KEY (course_id) 
    ); 

INSERT INTO courses (course_name) VALUES
('Math'), ('Phisics'), ('Chemistry'), ('Programming'), ('PE'),
('English'), ('Architecture'), ('Animal hunting'), ('Treasure hunting'), ('Cooking');

CREATE TABLE study_plan ( 
      row SERIAL, 
      student_id BIGINT UNSIGNED, 
	  course_id BIGINT UNSIGNED,	  
      PRIMARY KEY (row) 
    ); 

INSERT INTO study_plan (student_id, course_id) VALUES
(1, 1), (1, 4), (2, 2), (2, 9), (2, 5), (3, 3), (4, 4), (4, 6),
(5, 5), (5, 3), (6, 6), (7, 10), (8, 7), (9, 9), (10, 8), (10, 10);

INSERT INTO study_plan (student_id, course_id) VALUES
(1, 9), (2, 9), (3, 9), (5, 9),
(6, 10), (7, 10), (8, 10), (9, 10);

4.1
SELECT courses.course_name FROM courses LEFT JOIN study_plan USING (course_id)
GROUP BY courses.course_name
HAVING COUNT(study_plan.student_id) >= 5;

4.2
SELECT students.name, courses.course_name FROM courses
	INNER JOIN study_plan USING (course_id)
	LEFT JOIN students  USING(student_id)
	WHERE students.name = 'Ivanov';

5.
CREATE DATABASE t;
USE t;

CREATE TABLE parent (id INT NOT NULL,
                     PRIMARY KEY (id));

CREATE TABLE child (id INT NULL, 
                    parent_id INT NULL,
                    FOREIGN KEY (parent_id) REFERENCES parent(id));


INSERT INTO child (id, parent_id) VALUES (1, NULL);

INSERT INTO child (id, parent_id) VALUES (2, 1);

6.
SELECT user_id FROM track_downloads
WHERE user_id = 4;

SELECT DISTINCT user_id FROM track_downloads
WHERE user_id = 4;

7.
CREATE TABLE users ( 
      user_id SERIAL, 
      name VARCHAR(255), 	  
      PRIMARY KEY (user_id) 
    );

INSERT INTO users (name) VALUES
('Ivanov'), ('Petrov'), ('Sidorov'), ('Kaimetov'), ('Shifutinskii');

CREATE TABLE orders ( 
      order_id SERIAL, 
	  user_id BIGINT UNSIGNED,
      status SMALLINT, 	  
      PRIMARY KEY (order_id) 
    );

INSERT INTO orders (user_id, status) VALUES
(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 0),
(2, 0), (2, 1), (3, 0), (4, 1), (4, 1), (4, 1), (4, 1),
(4, 1), (4, 1), (5, 0), (5, 0), (5, 0);	

7.1
SELECT users.name FROM users INNER JOIN orders USING (user_id)
GROUP BY users.user_id
HAVING SUM(orders.status) = 0;

7.2
SELECT users.name FROM users INNER JOIN orders USING (user_id)
GROUP BY users.user_id
HAVING SUM(orders.status) > 5;
	

8.
WHERE - это ограничивающее выражение. Оно выполняется до того, как будет получен результат операции.

HAVING - фильтрующее выражение. Оно применяется к результату операции и выполняется уже после того как этот результат будет получен, в отличии от where.
Выражения WHERE используются вместе с операциями SELECT, UPDATE, DELETE, в то время как HAVING только с SELECT и предложением GROUP BY.
